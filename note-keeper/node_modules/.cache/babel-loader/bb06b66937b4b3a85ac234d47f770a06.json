{"ast":null,"code":"var _jsxFileName = \"/home/shambashib2000/Desktop/Projects/PocketBook/note-keeper/src/components/NewNotes.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router'; // React Router is a collection of navigational components.\n// this will hide our note id div from showing on the note screen\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst divStyle = {\n  display: 'none'\n}; // we use a class component because our notes will consist of states and \n// inheritance from a parent component which will pass properties \n// down the functional component via props. \n\nclass NewNotes extends React.Component {\n  // We use a constructor to set the intial state of the class objects.\n  constructor(props) {\n    super(props); // we set the intial state of the note nav to false, \n    // ie. there will be no notes to show thus no notes to \"redirect\" to when clicked\n\n    this.state = {\n      redirect: false\n    }; // we bind the components to our\n    // event handlers to be executed.\n\n    this.saveNote = this.saveNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n  } // saveNote Event Handler which will save a new note\n\n\n  saveNote(event) {\n    // the perventDefault option is added to stop the page\n    // from reloading upon submitting a note.\n    event.preventDefault(); // if the title of the note is empty, we validate it via alert.\n\n    if (this.title.value === \"\") {\n      alert(\"Title is needed\");\n    } else {\n      // we assign each note with an id, title, desc and image upon submit.\n      const note = {\n        id: Number(this.id.value),\n        title: this.title.value,\n        description: this.description.value\n      }; // we set the new state of the note nav to true so that \n      // can redirect to the note when clicked.\n\n      this.props.persistNote(note);\n      this.setState({\n        redirect: true\n      });\n    }\n  }\n\n  deleteNote(event) {\n    // testing purposes only\n    console.log('deleteNote');\n    event.preventDefault(); // we remove the note by deleting the respective id (note key)\n\n    this.props.deleteNote(this.props.note.id);\n  } // Switch between and then render(show) note titles, i.e either add \n  // or edit an existing note title.\n\n\n  renderFormTitleAction() {\n    return this.props.note.id !== undefined ? \"Edit Note\" : \"New Note\";\n  } // Render(show) save/delete note buttons for a new or existing note.\n\n\n  renderFormButtons() {\n    // if the note.id exists, then we can either delete or edit that note\n    if (this.props.note.id !== undefined) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-success float-right\",\n          children: \"Add Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.deleteNote,\n          className: \"btn btn-danger\",\n          children: \"Delete Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this);\n    }\n\n    return (\n      /*#__PURE__*/\n      // Show the add button to save a new note.\n      _jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-success float-right\",\n        children: \"Add Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n  render() {\n    // existing note redirection\n    if (this.state.redirect) {\n      // if the note doesn't exist, we return to main \"/\".\n      if (!this.props.note) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          push: true,\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 24\n        }, this);\n      } // route to an existing note upon redirect, \n      // note id: 1 will redirect to http://localhost:3000/note/1\n\n\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        push: true,\n        to: `/note/${this.props.note.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: this.renderFormTitleAction()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          ref: \"NewNotes\",\n          onSubmit: this.saveNote,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"note_id\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-control\",\n                style: divStyle,\n                disabled: true,\n                ref: id => this.id = id,\n                defaultValue: this.props.note.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"note_title\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"noteTitle\",\n                children: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-control\",\n                ref: title => this.title = title,\n                defaultValue: this.props.note.title,\n                placeholder: \"Save Princess Peach\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"note_desc\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"noteDescTitle\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"form-control\",\n                rows: \"10\",\n                ref: description => this.description = description,\n                defaultValue: this.props.note.description,\n                placeholder: \"When Mario reaches the end of the course, remember to save Princess Peach or Luigi will! \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), this.renderFormButtons()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n} // exports for use in other files.\n\n\nexport default NewNotes;","map":{"version":3,"sources":["/home/shambashib2000/Desktop/Projects/PocketBook/note-keeper/src/components/NewNotes.js"],"names":["React","Redirect","divStyle","display","NewNotes","Component","constructor","props","state","redirect","saveNote","bind","deleteNote","event","preventDefault","title","value","alert","note","id","Number","description","persistNote","setState","console","log","renderFormTitleAction","undefined","renderFormButtons","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router';\n// React Router is a collection of navigational components.\n\n// this will hide our note id div from showing on the note screen\nconst divStyle = {\n    display: 'none'\n};\n\n// we use a class component because our notes will consist of states and \n// inheritance from a parent component which will pass properties \n// down the functional component via props. \n\nclass NewNotes extends React.Component {\n    // We use a constructor to set the intial state of the class objects.\n    constructor(props) {\n        super(props);\n        // we set the intial state of the note nav to false, \n        // ie. there will be no notes to show thus no notes to \"redirect\" to when clicked\n        this.state = {\n            redirect: false\n        };\n        // we bind the components to our\n        // event handlers to be executed.\n        this.saveNote = this.saveNote.bind(this);\n        this.deleteNote = this.deleteNote.bind(this);\n    }\n    // saveNote Event Handler which will save a new note\n    saveNote(event) {\n        // the perventDefault option is added to stop the page\n        // from reloading upon submitting a note.\n        event.preventDefault();\n        // if the title of the note is empty, we validate it via alert.\n        if (this.title.value === \"\") {\n            alert(\"Title is needed\");\n        } else{\n            // we assign each note with an id, title, desc and image upon submit.\n            const note = {\n                id: Number(this.id.value),\n                title: this.title.value,\n                description: this.description.value\n            }\n            // we set the new state of the note nav to true so that \n            // can redirect to the note when clicked.\n            this.props.persistNote(note);\n            this.setState({\n                redirect: true\n            });\n        }\n    }\n    deleteNote(event) {\n        // testing purposes only\n        console.log('deleteNote');\n        event.preventDefault();\n        // we remove the note by deleting the respective id (note key)\n        this.props.deleteNote(this.props.note.id);\n    }\n\n    // Switch between and then render(show) note titles, i.e either add \n    // or edit an existing note title.\n    renderFormTitleAction() {\n        return (this.props.note.id !== undefined) ? \"Edit Note\" : \"New Note\";\n    }\n    // Render(show) save/delete note buttons for a new or existing note.\n    renderFormButtons() {\n        // if the note.id exists, then we can either delete or edit that note\n        if(this.props.note.id !== undefined) {\n            return (<div>\n                {/* Show the save button to edit note */}\n                <button type=\"submit\" className=\"btn btn-success float-right\">Add Note</button>\n                {/* Show the delete button to delete note */}\n                <button onClick={this.deleteNote} className=\"btn btn-danger\">Delete Note</button>\n            </div>);\n        }\n        return (\n            // Show the add button to save a new note.\n            <button type=\"submit\" className=\"btn btn-success float-right\">Add Note</button>\n        );\n    }\n\n    render() {\n\n        // existing note redirection\n        if (this.state.redirect) {\n            // if the note doesn't exist, we return to main \"/\".\n            if(!this.props.note) {\n                return <Redirect push to=\"/\"/>;\n            }\n            // route to an existing note upon redirect, \n            // note id: 1 will redirect to http://localhost:3000/note/1\n            return <Redirect push to={`/note/${this.props.note.id}`}/>;\n\n        }\n\n        return (\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    {/* This will render the correct titles depending on if there are existing notes or not*/}\n                    {this.renderFormTitleAction()}\n                </div>\n                <div className=\"card-body\">\n                    {/* Form that allows us to add a new note*/}\n                    <form ref=\"NewNotes\" onSubmit={this.saveNote}>\n                        <div className=\"form-group\">\n                            {/* Renders a new note id (divStyle will hide this from view)*/}\n                            <p className=\"note_id\">\n                                <input className=\"form-control\" style={divStyle} disabled ref={id => this.id = id} defaultValue={this.props.note.id}/>\n                            </p>\n                            {/* Renders a new note title */}\n                            <p className=\"note_title\">\n                                <label className=\"noteTitle\">Title</label>\n                                <input className=\"form-control\" ref={title => this.title = title} defaultValue={this.props.note.title} placeholder=\"Save Princess Peach\"/>\n                            </p>\n                            {/* Renders a new note description*/}\n                            <p className=\"note_desc\">\n                                <label className=\"noteDescTitle\">Description</label>\n                                <textarea className=\"form-control\" rows=\"10\" ref={description => this.description = description} defaultValue={this.props.note.description} placeholder=\"When Mario reaches the end of the course, remember to save Princess Peach or Luigi will! \"/>\n                            </p>\n                        </div>\n                        {/* This will render the correct buttons depending on if there are existing notes or not*/}\n                        {this.renderFormButtons()}\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n// exports for use in other files.\nexport default NewNotes; \n\n    \n"]},"metadata":{},"sourceType":"module"}