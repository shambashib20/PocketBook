{"ast":null,"code":"var _jsxFileName = \"/home/shambashib2000/Desktop/Projects/PocketBook/note-keeper/src/components/Notes.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport NewNotes from './NewNotes';\nimport EditNotes from './EditNotes';\nimport NotesList from './ListNotes';\nimport { Route, Link } from 'react-router-dom'; //class component will switch between displaying all existing or new note rendering states\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NotesApp extends React.Component {\n  //We use a constructor to set the initial state of the class object\n  constructor(props) {\n    super(props); //will store the notes on our localStorage for storing user notes (local testing purposes)\n\n    const notes = localStorage.getItem('notes') ? JSON.parse(localStorage.getItem('notes')) : []; //sets the initial state of all notes on storage base\n\n    this.state = {\n      notes: notes,\n      selectedNote: null,\n      editMode: false\n    }; //we bind the components to our event handlers to be executed\n\n    this.getNotesNextId = this.getNotesNextId.bind(this);\n    this.addNote = this.addNote.bind(this);\n    this.viewNote = this.viewNote.bind(this);\n    this.openEditNote = this.openEditNote.bind(this);\n    this.saveEditedNote = this.saveEditedNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n  } //Initiates the note id's that are/will be stored via the localStorage \n\n\n  getNotesNextId() {\n    return this.state.notes.length > 0 ? this.state.notes[this.state.notes.length - 1].id + 1 : 0;\n  } //we persist the fetched data as string because we get the stored value parsed as a boolean, ie. does it have notes (yes/no)\n\n\n  persistNotes(notes) {\n    localStorage.setItem('notes', JSON.stringify(notes));\n    this.setState({\n      notes: notes\n    });\n  } //we give each note an id, date and new persisted state when we add a new note and push it to the notes local array.\n\n\n  addNote(note) {\n    //set notes values\n    note.id = this.getNotesNextId();\n    note.date = moment();\n    const notes = this.state.notes; //adds new note values\n\n    notes.push(note);\n    this.persistNotes(notes);\n    this.setState({\n      selectedNote: null,\n      editMode: false\n    });\n  } //we view each note via mapping over it's id array, and when it is not found we handle it via an arror handler\n\n\n  viewNote(id) {\n    const notePosition = this.state.notes.findIndex(n => n.id === id); //display the note on the screen\n\n    if (notePosition >= 0) {\n      this.setState({\n        selectedNote: this.state.notes[notePosition],\n        editMode: false\n      });\n    } //error handler\n    else {\n      console.warn('The note with the id ' + id + ' was not found. Please try again.');\n    }\n  } //we edit each note via mapping over it's id array, and when it is not found we handle it via an arror handler\n\n\n  openEditNote(id) {\n    const notePosition = this.state.notes.findIndex(n => n.id === id); //displays the note to edit on screen\n\n    if (notePosition >= 0) {\n      this.setState({\n        selectedNote: this.state.notes[notePosition],\n        editMode: true\n      });\n    } //error handler\n    else {\n      console.warn('The note with the id ' + id + ' was not found. Please try again.');\n    }\n  } //we save each note via mapping over it's id array, and when it is not found we handle it via an arror handler\n\n\n  saveEditedNote(note) {\n    const notes = this.state.notes;\n    const notePosition = notes.findIndex(n => n.id === note.id); //displays the note to add on screen\n\n    if (notePosition >= 0) {\n      note.date = moment();\n      notes[notePosition] = note;\n      this.persistNotes(notes);\n    } //error handler\n    else {\n      console.warn('The note with the id ' + note.id + ' was not found. Please try again.');\n    } //updates notes to list\n\n\n    this.setState({\n      selectedNote: note,\n      editMode: false\n    });\n  } //we delete each note via mapping over it's id array, and when it is not found we handle it via an arror handler\n\n\n  deleteNote(id) {\n    const notes = this.state.notes;\n    const notePosition = notes.findIndex(n => n.id === id); //deletes the note from the screen screen\n\n    if (notePosition >= 0) {\n      if (window.confirm('Are you sure you want to delete this note?')) {\n        notes.splice(notePosition, 1);\n        this.persistNotes(notes);\n        this.setState({\n          selectedNote: null,\n          editMode: false\n        });\n      }\n    } //error handler\n    else {\n      console.warn('The note with the id ' + id + ' was not found. Please try again.');\n    }\n  } //initiates the values of each new note\n\n\n  getEmptyNote() {\n    return {\n      title: \"\",\n      description: \"\",\n      image: \"\"\n    };\n  } //renders the notes list menu on the screen\n\n\n  renderMenu() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [this.renderHeader(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(NotesList, {\n          notes: this.state.notes,\n          viewNote: this.viewNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  } //renders the notes header on the screen\n\n\n  renderHeader() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-header\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/note\",\n        render: routeProps => /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-danger\",\n            children: \"Cancel Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), [\"/\", \"/note/:id\"].map(path => /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: path,\n        render: routeProps => /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/note\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-success\",\n            children: \"New Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)\n      }, path, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this);\n  } //display the notes when clicked on for editing, note and empty note views\n\n\n  setMainAreaRoutes() {\n    const editMode = this.state.editMode;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [editMode ? /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/note/:id\",\n        render: routeProps => /*#__PURE__*/_jsxDEV(NewNotes, {\n          persistNote: this.saveEditedNote,\n          deleteNote: this.deleteNote,\n          note: this.state.selectedNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/note/:id\",\n        render: routeProps => /*#__PURE__*/_jsxDEV(EditNotes, {\n          editNote: this.openEditNote,\n          deleteNote: this.deleteNote,\n          note: this.state.selectedNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/note\",\n        render: routeProps => /*#__PURE__*/_jsxDEV(NewNotes, {\n          persistNote: this.addNote,\n          note: this.getEmptyNote()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notesApp container-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-notes-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \" NOTES \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: this.renderMenu()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: this.setMainAreaRoutes()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }\n\n} //exports for use in other files\n\n\nexport default NotesApp;","map":{"version":3,"sources":["/home/shambashib2000/Desktop/Projects/PocketBook/note-keeper/src/components/Notes.js"],"names":["React","moment","NewNotes","EditNotes","NotesList","Route","Link","NotesApp","Component","constructor","props","notes","localStorage","getItem","JSON","parse","state","selectedNote","editMode","getNotesNextId","bind","addNote","viewNote","openEditNote","saveEditedNote","deleteNote","length","id","persistNotes","setItem","stringify","setState","note","date","push","notePosition","findIndex","n","console","warn","window","confirm","splice","getEmptyNote","title","description","image","renderMenu","renderHeader","routeProps","map","path","setMainAreaRoutes","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport NewNotes from './NewNotes';\nimport EditNotes from './EditNotes';\nimport NotesList from './ListNotes';\nimport { Route, Link } from 'react-router-dom';\n\n//class component will switch between displaying all existing or new note rendering states\nclass NotesApp extends React.Component {\n        //We use a constructor to set the initial state of the class object\n        constructor(props) {\n        super(props);\n        //will store the notes on our localStorage for storing user notes (local testing purposes)\n        const notes = localStorage.getItem('notes') ? JSON.parse(localStorage.getItem('notes')) : [];\n        //sets the initial state of all notes on storage base\n        this.state = {\n            notes: notes,\n            selectedNote: null,\n            editMode: false\n        };\n        //we bind the components to our event handlers to be executed\n        this.getNotesNextId = this.getNotesNextId.bind(this);\n        this.addNote = this.addNote.bind(this);\n        this.viewNote = this.viewNote.bind(this);\n        this.openEditNote = this.openEditNote.bind(this);\n        this.saveEditedNote = this.saveEditedNote.bind(this);\n        this.deleteNote = this.deleteNote.bind(this);\n    }\n\n    //Initiates the note id's that are/will be stored via the localStorage \n    getNotesNextId() {\n        return this.state.notes.length > 0 ? this.state.notes[this.state.notes.length - 1].id + 1 : 0;\n    }\n\n    //we persist the fetched data as string because we get the stored value parsed as a boolean, ie. does it have notes (yes/no)\n    persistNotes(notes) {\n        localStorage.setItem('notes', JSON.stringify(notes));\n        this.setState({notes: notes});\n    }\n\n    //we give each note an id, date and new persisted state when we add a new note and push it to the notes local array.\n    addNote(note) {\n        //set notes values\n        note.id = this.getNotesNextId();\n        note.date = moment();\n        const notes = this.state.notes;\n        //adds new note values\n        notes.push(note);\n        this.persistNotes(notes);\n        this.setState({selectedNote: null, editMode: false});\n    }\n\n    //we view each note via mapping over it's id array, and when it is not found we handle it via an arror handler\n    viewNote(id) {\n        const notePosition = this.state.notes.findIndex((n) => n.id === id);\n        //display the note on the screen\n        if (notePosition >= 0) {\n            this.setState({\n                selectedNote: this.state.notes[notePosition], \n                editMode: false\n            });\n        } \n        //error handler\n        else {\n            console.warn('The note with the id ' + id + ' was not found. Please try again.');\n        }\n    }\n\n    //we edit each note via mapping over it's id array, and when it is not found we handle it via an arror handler\n    openEditNote(id) {\n        const notePosition = this.state.notes.findIndex((n) => n.id === id);\n        //displays the note to edit on screen\n        if (notePosition >= 0) {\n            this.setState({\n                selectedNote: this.state.notes[notePosition], \n                editMode: true\n            });\n        } \n        //error handler\n        else {\n            console.warn('The note with the id ' + id + ' was not found. Please try again.');\n        }\n    }\n\n    //we save each note via mapping over it's id array, and when it is not found we handle it via an arror handler\n    saveEditedNote(note) {\n        const notes = this.state.notes;\n        const notePosition = notes.findIndex((n)=> n.id === note.id);\n        //displays the note to add on screen\n        if (notePosition >= 0) {\n            note.date = moment();\n            notes[notePosition] = note;\n            this.persistNotes(notes);\n        } \n        //error handler\n        else {\n            console.warn('The note with the id ' + note.id + ' was not found. Please try again.');\n        }\n        //updates notes to list\n        this.setState({\n            selectedNote: note, \n            editMode: false\n        });\n    }\n\n    //we delete each note via mapping over it's id array, and when it is not found we handle it via an arror handler\n    deleteNote(id) {\n        const notes = this.state.notes;\n        const notePosition = notes.findIndex((n)=> n.id === id);\n        //deletes the note from the screen screen\n        if (notePosition >= 0) {\n            if (window.confirm('Are you sure you want to delete this note?')) {\n                notes.splice(notePosition, 1);\n                this.persistNotes(notes);\n                this.setState({selectedNote: null, editMode: false});\n            }\n        } \n        //error handler\n        else {\n            console.warn('The note with the id ' + id + ' was not found. Please try again.');\n        }\n    }\n\n    //initiates the values of each new note\n    getEmptyNote() {\n        return {\n            title: \"\",\n            description: \"\",\n            image: \"\"\n        };\n    }\n\n    //renders the notes list menu on the screen\n    renderMenu () {\n        return (\n            <div className=\"card\">\n                {this.renderHeader()}\n                <div className=\"card-body\">\n                    <NotesList notes={this.state.notes} viewNote={this.viewNote}/>   \n                </div>\n            </div>\n        )\n    }\n\n    //renders the notes header on the screen\n    renderHeader() {\n        return (\n            <div className=\"card-header\">\n                {/*renders close view*/ }\n                <Route exact path=\"/note\" render={routeProps => \n                    <Link to=\"/\">\n                        <button type=\"button\" className=\"btn btn-danger\">Cancel Note</button>\n                    </Link> }/>\n                {/*renders note view*/ }\n                {[\"/\", \"/note/:id\"].map(path =>\n                <Route key={path} exact path={path} render={routeProps => \n                    <Link to=\"/note\">\n                        <button type=\"button\" className=\"btn btn-success\">New Note</button>\n                    </Link>}/>\n                )}\n            </div>\n        )\n    }\n\n    //display the notes when clicked on for editing, note and empty note views\n    setMainAreaRoutes() {\n        const editMode = this.state.editMode;\n        return (<div>\n            {/*edits either the new note or exisitn note*/ }\n            {editMode ? (\n                <Route exact path=\"/note/:id\"\n                       render={routeProps => <NewNotes persistNote={this.saveEditedNote} deleteNote={this.deleteNote} note={this.state.selectedNote}/>}\n                    />\n                ) : (\n                <Route exact path=\"/note/:id\" render={routeProps =>     \n                    <EditNotes editNote={this.openEditNote} deleteNote={this.deleteNote} note={this.state.selectedNote}/>}\n                />\n            )}\n            {/*displays if no notes can be found*/ }\n            <Route exact path=\"/note\"\n                   render={routeProps =>  <NewNotes persistNote={this.addNote} note={this.getEmptyNote()}/>}\n                />\n        </div>)\n    }\n\n    render() {\n        return (\n            <div className=\"notesApp container-fluid\">\n                 <div className=\"card-notes-header\">\n                    <h2> NOTES </h2>\n                </div>\n                <div className=\"row\">\n                    {/*renders note list menu*/ }\n                    <div className=\"col-12\">\n                        {this.renderMenu()}  \n                    </div>\n                    {/*renders note area menu*/ }\n                    <div className=\"col-12\">\n                        {this.setMainAreaRoutes()}\n                    </div>\n                    </div>\n            </div>\n        );\n    }\n}\n\n//exports for use in other files\nexport default NotesApp;"]},"metadata":{},"sourceType":"module"}