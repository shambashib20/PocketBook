{"ast":null,"code":"var _jsxFileName = \"/home/shambashib2000/Desktop/Projects/PocketBook/note-keeper/src/components/EditNotes.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router';\nimport moment from 'moment';\nimport newline from 'react-newline-to-break'; //  moment is a javascript date library for parsing,\n//  validating, manipulating, and formatting dates.\n// class component will switch between editing and deleting\n// note rendering.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditNotes extends React.Component {\n  // We will use a constructor to set the intial state of the \n  // class object\n  constructor(props) {\n    super(props); // we set the intial state of the note nav to\n    // false, ie. there will be no notes to show \n    // thus no notes to \"redirect\" to when clicked.\n\n    this.state = {\n      redirect: false\n    }; // we bind the components to our event handlers\n    // to be executed.\n\n    this.deleteNote = this.deleteNote.bind(this);\n    this.editNote = this.editNote.bind(this);\n  } // deleteNote Event Handler which will delete an \n  // existing note\n\n\n  deleteNote(event) {\n    // the preventDefault() option is added to stop\n    // the page from reloading upon submitting a note.\n    event.preventDefault(); // we remove the note by deleting the respective id \n    // (note key)\n\n    this.props.deleteNote(this.props.note.id);\n  } // editNote Event Handler which will update an existing\n  // note\n\n\n  editNote(event) {\n    // the preventDefault() option is added to stop the page\n    // from reloading upon submitting a note.\n    event.preventDefault(); // we edit the note by updating the respective id (note key)\n\n    this.props.editNote(this.props.note.id);\n  } // will render to be displayed when a new date whenever a note is edited.\n\n\n  renderFormattedDate() {\n    return 'Last edited:' + moment(this.props.note.date).format(\"DD MMM YYYY [at] HH:mm\");\n  }\n\n  render() {\n    // if the note doesn't exist, we return to main \"/\"\n    if (this.state.redirect || !this.props.note) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        push: true,\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 20\n      }, this);\n    } // else we return a card with the note details\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: this.props.note.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center font-weight-light small text-muted\",\n          children: this.renderFormattedDate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text-main\",\n          children: [\"Title: \", newline(this.props.note.title)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: newline(this.props.note.description)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.deleteNote,\n          className: \"btn btn-danger\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.editNote,\n          className: \"btn btn-success float-right\",\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n} //exports it for use in other files\n\n\nexport default EditNotes;","map":{"version":3,"sources":["/home/shambashib2000/Desktop/Projects/PocketBook/note-keeper/src/components/EditNotes.js"],"names":["React","Redirect","moment","newline","EditNotes","Component","constructor","props","state","redirect","deleteNote","bind","editNote","event","preventDefault","note","id","renderFormattedDate","date","format","render","title","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router';\nimport moment from 'moment';\nimport newline from 'react-newline-to-break';\n\n//  moment is a javascript date library for parsing,\n//  validating, manipulating, and formatting dates.\n\n// class component will switch between editing and deleting\n// note rendering.\n\nclass EditNotes extends React.Component {\n    // We will use a constructor to set the intial state of the \n    // class object\n    constructor(props) {\n        super(props);\n        // we set the intial state of the note nav to\n        // false, ie. there will be no notes to show \n        // thus no notes to \"redirect\" to when clicked.\n        this.state = {\n            redirect : false\n        };\n        // we bind the components to our event handlers\n        // to be executed.\n        this.deleteNote = this.deleteNote.bind(this);\n        this.editNote = this.editNote.bind(this);\n    }\n\n    // deleteNote Event Handler which will delete an \n    // existing note\n    deleteNote(event){\n        // the preventDefault() option is added to stop\n        // the page from reloading upon submitting a note.\n        event.preventDefault();\n        // we remove the note by deleting the respective id \n        // (note key)\n        this.props.deleteNote(this.props.note.id);\n\n    }\n    // editNote Event Handler which will update an existing\n    // note\n    editNote(event){\n        // the preventDefault() option is added to stop the page\n        // from reloading upon submitting a note.\n        event.preventDefault();\n        // we edit the note by updating the respective id (note key)\n        this.props.editNote(this.props.note.id);\n    }\n\n    // will render to be displayed when a new date whenever a note is edited.\n    renderFormattedDate(){\n        return 'Last edited:' + moment(this.props.note.date).format(\"DD MMM YYYY [at] HH:mm\");\n    }\n\n    render() {\n        // if the note doesn't exist, we return to main \"/\"\n        if (this.state.redirect || !this.props.note) {\n            return <Redirect push to=\"/\"/>;\n        }\n\n        // else we return a card with the note details\n        return (\n            <div className=\"card\">\n                {/* Will render the note title */}\n                <div className=\"card-header\">\n                    <h4>{this.props.note.title}</h4>\n                </div>\n                <div className=\"card-body\">\n                    {/* Will render the note added/last updated date */}\n                    <p className=\"text-center font-weight-light small text-muted\">{this.renderFormattedDate()}</p>\n                    {/*Will render the note description*/}\n                    <p className=\"card-text-main\">Title: {newline(this.props.note.title)}</p>\n                    <p className=\"card-text\">{newline(this.props.note.description)}</p>\n                    {/*Will render the delete button*/}\n                    <button onClick={this.deleteNote} className=\"btn btn-danger\">Delete</button>\n                    {/*Will render the edit button*/}\n                    <button onClick={this.editNote} className=\"btn btn-success float-right\">Edit</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n//exports it for use in other files\nexport default EditNotes;\n\n"]},"metadata":{},"sourceType":"module"}